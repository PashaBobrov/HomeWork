package HomeWork6;
/**
 * Задача на умение работать с: строками, Set, Map, регулярные выражения*, работа с файлами**.
 * В задаче запрещено использовать stream
 *
 * Падежи, склонения, форма слова, опечатки, переносы и прочие проблемы текста - не ваша проблема! Вообще не думайте над тем как исправить текст, думайте над правилами разбиения текста на слова.
 * Отдельно стоящие знаки препинания, пробелы и переводы строк - это не слова. Регистр в словах имеет значение.
 *
 * На основании вопросов от студентов рассмотрим некоторые варианты текстов с вариантами разбиения на слова:
 * 	1. "привет, как дела!" - тут три слова "привет", "как", "дела";
 * 	2. "привет,какдела!" - тут два слова "привет", "какдела";
 * 	3. "привет;какдела!" - тут два слова "привет", "какдела";
 * 	4. "как дела!.Что делаешь?"- тут четыре слова "как", "дела", "Что", "делаешь";
 * 	5. "Привет-привет" - тут одно слово "Привет-привет";
 * 	6. "Привет -привет" - тут два слова "Привет", "привет";
 * 	7. "4-х" - тут одно слово "4-х";
 * 	8. "один и 1" - тут три слова "один", "и", "1"
 * 	9. "бабушка бабушке бабушку" - тут три слова "бабушка", "бабушке", "бабушку"
 *
 * Совет по выполнению данного ДЗ. Сначала воспользоваться "простым" правилом разбиения на слова. Например ориентируюсь по пробелам. Выполнить подсчёт слов, отсортировать их и проверить что в целом всё остальное работает. А потом уже заниматься усложнением правила разбиения в соответсвии с примерами написанными выше. Так вы более грамотно распределите своё время на выполнение данного задания.
 *
 * Война и мир:
 * 1. Скачать книгу "Война и мир" https://www.dropbox.com/s/8mstiwnx9o9btw4/%D0%B2%D0%BE%D0%B9%D0%BD%D0%B0%20%D0%B8%20%D0%BC%D0%B8%D1%80_%D0%BA%D0%BD%D0%B8%D0%B3%D0%B0.txt?dl=0 на компьютер. Для чтения данного файла можно воспользоваться статьёй https://howtodoinjava.com/java/io/java-read-file-to-string-examples/ . Разделами 1 и 3, второй раздел использовать запрещено.
 * 2. Работа с коллекциями:
 * 	2.1 Найти в тексте все использованные слова и поместить их в коллекцию Set.
 * 		Более подробное описание задачи, для понимания чего я хочу: Для решения данной задачи необходимо прочитать текстовый файл и поместить текст из данного текстового файла в строку. Далее данную строку необходимо обработать таким образом чтобы из неё можно было бы считывать слова. Далее каждое полученное слово поместить в Set. Благодаря возможностям Set'ов в итоге мы получим коллекцию содержащую набор слов который был использован при написании данного текста. В конце выводим в консоль количество использованных слов.
 * 	2.2 Найти в тексте топ N (настраиваемое значение) слов и вывести количество этих слов используя Map и List. Отсортировать по количеству. Распечатать в консоль.
 * 		Пример: Война - 200 раз, Мир - 100 раз и так далее. Знаки препинания, пробелы и переводы строк - это не слова.
 * 		Более подробное описание задачи, для понимания чего я хочу: Для решения данной задачи необходимо прочитать текстовый файл  и поместить текст из данного текстового файла в строку.  Далее данную строку необходимо обработать таким образом чтобы из неё можно было бы считывать слова. Далее каждое полученное слово поместить как ключ в Map, а количество повторений в тексте ставить как значение. Для того чтобы это работало вам необходимо постоянно проверять наличие ключа в Map, и если нужный нам ключ уже присутсвует в нашей коллекции то мы должны увеличить уже имеющееся значение в коллекции на еденицу. После наполнения данной коллекции мы получим набор слов и их количество в тексте. Далее нам нужно придумать как отсортировать получившуюся коллекцию но к сожалению непосредственно эту коллекцию отсортировать не получится, придётся создавать для этого List и наполнять лист Entry из Map. В итоге из получившегося отсортированного набора данных вывести первые N записей.
 * 3. Написать интерфейс ISearchEngine. Это будет интерфейс в котором будут методы:
 * 	3.1 long search(String text, String word) - Метод возвращает информации о количестве раз которое встречается слово в тексте. Первый параметр текст в котором ищем, второй параметр что ищем в тексте.
 * 4. Реализовать интерфейс ISearchEngine:
 * 	4.1 Написать класс EasySearch. Реализовать поиск используя метод indexOf из класса String. В данной реализации запрещено использовать регулярные выражения в любом виде, для любых задач. Данный класс ищет слова с учётом регистра.
 * 	4.2* Написать класс RegExSearch реализующий интерфейс ISearchEngine. Реализовать поиск при помощи класса Matcher. Данный класс ищет слова с учётом регистра.
 * 	4.3* Написать декоратор SearchEnginePunctuationNormalizer для ISearchEngine который будет удалять нежелательные символы. Любые знаки препинания, лишние пробелы и например переводы строк.
 * 	4.4* Написать декоратор для ISearchEngine который будет позволять искать данные без учёта регистра.
 * 		Более подробное описание задачи, для понимания чего я хочу:  Тут можно пойти на хитрость, данный класс может просто приводить весь текст и передаваемое слово к нижнему регистру но тут возникает вопрос как данный класс может помочь для RegExSearch. Класс RegExSearch в своей реализации использует регулярные выражения и в случае с регулярными выражениями есть возможность указать свойство CASE_INSENSITIVE для выражение и оно и так станет не чувствительно к регистру. Для того чтобы тут что-то оптимизировать можно воспользоваться оператором instanceof и вычислить таки какого класса нам передали объект ISearchEngine. Данная практика является нежелательной но при этом в некоторых случаях очень эффективной.
 * 	4.5** Написать декоратор SearchEngineCaseNormalizer для ISearchEngine который будет приводит все слова к единому падежу. Что позволит учитывать их как одинаковые слова. Например после работы данного класса текст "бабушка бабушке бабушку" уже будет выдавать: "бабушка - 3". Падеж можно настроить при помощи конструктора.
 * 5. Используя реализации интерфейса ISearchEngine вывести информацию как часто встречаются слова "война", "и" (как союз), "мир" вне зависимости от регистра.
 */

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

public class SearchMain {
    public static  void main(String[] args) throws IOException {
        Scanner scanner =  new Scanner(System.in);
        String text = new String(Files.readAllBytes(Path.of("wp.txt")));//, Charset.forName("windows-1251"));

        ITextSpliterator spliterator = new DefaultSpliterator();
        String[] strings = spliterator.split(text);
        //2.1
        Set<String> uniqWords = new HashSet<>();
        for (String str : strings) {
            uniqWords.add(str);
        }
        System.out.println(uniqWords);
        System.out.println("Количество использованных слов " + uniqWords.size());

        //2.2
        Map<String,Integer> topWordsMap = new HashMap<>();
        for (String str : strings) {
            if (topWordsMap.containsKey(str)) {
                topWordsMap.put(str,topWordsMap.get(str) + 1);
            } else {
                topWordsMap.put(str,1);
            }
        }
        List <Entry> topWordsList = new ArrayList<>();
        Set <String> keys = topWordsMap.keySet();
        for (String key: keys) {
            topWordsList.add(new Entry(key,topWordsMap.get(key)));
        }

        System.out.print("Enter count TOP ");
        int TOP = scanner.nextInt();
        topWordsList.sort(Comparator.reverseOrder());
        for (int i = 0; i < TOP; i++) {
            System.out.println(topWordsList.get(i));
        }

        //4.1
        ISearchEngine searchEngine = new EasySearch();
        System.out.println("война " + searchEngine.search(text,"война"));
        System.out.println("и     " + searchEngine.search(text,"и"));
        System.out.println("мир   " + searchEngine.search(text,"мир"));

        //4.2
        ISearchEngine searchEngineRegEx = new RegExSearch();
        System.out.println("война " + searchEngineRegEx.search(text,"война"));
        System.out.println("и     " + searchEngineRegEx.search(text,"и"));
        System.out.println("мир   " + searchEngineRegEx.search(text,"мир"));

        //4.3
        ISearchEngine searchEnginePunctuationNormalizer = new SearchEnginePunctuationNormalizer(searchEngineRegEx);
        System.out.println("война " + searchEnginePunctuationNormalizer.search(text,"война"));
        System.out.println("и     " + searchEnginePunctuationNormalizer.search(text,"и"));
        System.out.println("мир   " + searchEnginePunctuationNormalizer.search(text,"мир"));

        //4.4
        ISearchEngine searchEngineIgnoreCase = new SearchEngineIngoreCase(searchEngineRegEx);
        System.out.println("война " + searchEngineIgnoreCase.search(text,"война"));
        System.out.println("и     " + searchEngineIgnoreCase.search(text,"и"));
        System.out.println("мир   " + searchEngineIgnoreCase.search(text,"мир"));

        //4.5
        ISearchEngine searchEngineCaseNormalizer = new SearchEngineCaseNormalizer(searchEngineIgnoreCase,"аяеуы");
        System.out.println("война " + searchEngineCaseNormalizer.search(text,"война"));
        System.out.println("и     " + searchEngineCaseNormalizer.search(text,"и"));
        System.out.println("мир   " + searchEngineCaseNormalizer.search(text,"мир"));

    }
    
}
